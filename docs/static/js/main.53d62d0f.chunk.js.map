{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GiftGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategoria","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getHttp","categoria","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GiftGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","catch","console","warn","useFetchGifs","GifExpertApp","categorias","setCategorias","c","ReactDOM","render","document","getElementById"],"mappings":"2LAoCeA,EAhCK,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAElB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVW,SAAEC,GACnBA,EAAEC,iBACCJ,EAAWK,OAAOC,QAAU,IAE3BR,GAAa,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACpCN,EAAc,MAKlB,SACI,uBACAO,KAAK,OACLC,MAAOT,EACPU,SAnBa,SAAEP,GACnBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,4DACP,mCACE,GACRC,EAHa,gDAGkCC,UAAUH,GAH5C,kBAEL,GAFK,oBACP,oCADO,SAIKI,MAAMF,GAJX,cAIbG,EAJa,gBAKIA,EAAUC,OALd,uBAKXC,EALW,EAKXA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCYLO,EAVM,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAE3B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCsBFO,EAxBC,SAAC,GAAmB,IAAjBnB,EAAgB,EAAhBA,UAIf,ECJwB,SAAEA,GAC1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACNxB,EAASC,GACRwB,MAAM,SAAAC,GAAI,OAAIH,EAAS,CACpBf,KAAMkB,EACNL,SAAS,OAEZM,MAAMC,QAAQC,QAChB,CAAE5B,IAEEqB,EDX0BQ,CAAc7B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACI,qCACI,6BAAMpB,IACJoB,GAAW,2CACb,qBAAKJ,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADCA,EAAIC,aEUvBmB,EAzBM,WAGjB,MAAoC5C,mBAAS,CAAC,cAA9C,mBAAO6C,EAAP,KAAmBC,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAc/C,aAAe+C,IAC7B,uBAGA,6BAEQD,EAAWtB,KAAK,SAACwB,GAAD,OACZ,cAAC,EAAD,CAAmBjC,UAAYiC,GAAhBA,Y,MCdvCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.53d62d0f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst AddCategory = ({setCategoria}) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n    const cambiarValor = ( e ) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n    //el valor de useState siempre va a ser el ultimo valor que se almacena. \r\n    \r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length >= 2){\r\n            /* console.log('submit hecho ', e); */\r\n            setCategoria(cats => [inputValue,...cats]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input\r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={ cambiarValor }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategoria: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","export const getHttp = async(categoria) =>{\r\n    const api = 'deOgmLVImnG5Fmj3Pjt3cYwdcrTkuZRy';\r\n    const limit = 15;\r\n    const url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI(categoria)}&limit=${ limit }&api_key=${ api }`;\r\n    const respuesta = await fetch(url);\r\n    const { data } = await respuesta.json();\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nconst GiftGridItem = ({ title, url }) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title }></img>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GiftGridItem\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GiftGridItem from './GiftGridItem';\r\n\r\n\r\nconst GifGrid = ({ categoria }) => {\r\n    /* \r\n        helpers => van a ser funciones que hacen un trabajo en especifico y retorna un valor\r\n    */\r\n    const { data:images, loading } = useFetchGifs( categoria );\r\n    \r\n    return (\r\n        <>\r\n            <h3>{ categoria }</h3>  \r\n            { loading && <p>Cargando..</p> }\r\n            <div className=\"card-grid\">\r\n                { \r\n                    images.map( img => \r\n                        <GiftGridItem  \r\n                            key={ img.id } \r\n                            { ...img }\r\n                        />\r\n                    )\r\n                }\r\n            </div>\r\n        </>\r\n    )     \r\n}\r\n\r\nexport default GifGrid\r\n","//los hooks no son mas que funciones\r\n\r\nimport { useEffect, useState } from \"react\"\r\nimport { getHttp } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( categoria ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getHttp( categoria )\r\n        .then( imgs => setState({\r\n            data: imgs,\r\n            loading: false\r\n        }))\r\n        .catch(console.warn);\r\n    }, [ categoria ]);\r\n\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport AddCategory from './AddCategory';\r\nimport GifGrid from './GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    \r\n    const [categorias, setCategorias] = useState(['Spiderman']);\r\n    \r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>   \r\n            <AddCategory  setCategoria={ setCategorias }/>\r\n            <br></br>\r\n            {/* <button onClick={ handleAdd }>Agregar</button> */}\r\n\r\n            <ol>\r\n                { \r\n                    categorias.map( (c) => \r\n                        <GifGrid key={ c } categoria={ c }\r\n                    />)\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './components/GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n//componente \n\n"],"sourceRoot":""}